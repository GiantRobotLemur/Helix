//! @file BootUtils/MemoryMap.hpp
//! @brief The declaration of an object which manages the boot-time memory map.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2024
//! @copyright This file is part of the Helix operating system project which is
//! released under GPL 3 license. See LICENSE file at the repository root or go
//! to https://github.com/GiantRobotLemur/Helix for full license details.
////////////////////////////////////////////////////////////////////////////////

#ifndef __HELIX_BOOT_MEMORY_MAP_HPP__
#define __HELIX_BOOT_MEMORY_MAP_HPP__

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Data Type Declarations
////////////////////////////////////////////////////////////////////////////////
struct MemMapEntry;

////////////////////////////////////////////////////////////////////////////////
// Class Declarations
////////////////////////////////////////////////////////////////////////////////
//! @brief An object which manages the boot-time memory map.
class MemoryMap
{
public:
    // Construction/Destruction
    MemoryMap();
    ~MemoryMap() = default;

    // Accessors
    size_t getRegionCount() const;
    const MemMapEntry *getRegions() const;
    bool isRegionAccessable(size_t index) const;

    // Operations
    bool initialise(MemMapEntry *entries, size_t count);

    // Overrides
private:
    // Internal Types

    // Internal Functions

    // Internal Fields
    MemMapEntry *_allRegions;
    size_t _regionCount;
};

////////////////////////////////////////////////////////////////////////////////
// Function Declarations
////////////////////////////////////////////////////////////////////////////////

#ifdef TEST_BUILD
// Functions used to simulate the target memory map while testing.
void *getSystemBase();
void setSystemBase(void *baseAddr, uintptr_t size);
#else
constexpr void *getSystemBase() noexcept { return nullptr; }
#endif


////////////////////////////////////////////////////////////////////////////////
// Templates
////////////////////////////////////////////////////////////////////////////////
template<typename T> T *getAddress(uint64_t address)
{
    return reinterpret_cast<T *>(static_cast<uint8_t *>(getSystemBase()) + address);
}

#endif // Header guard
////////////////////////////////////////////////////////////////////////////////
